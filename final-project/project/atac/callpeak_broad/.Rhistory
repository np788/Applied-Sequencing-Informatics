use.isotype.control = FALSE, # use isotype controls to define the technical component
#isotype.control.name.vec = rownames(cells_mtx_rawprot)[1:10] # names of isotype control abs
)
# filter raw protein, RNA and metadata to only include cell-containing droplets
cells_rna = rna[ ,positive_cells]
md = md[positive_cells, ]
# create Seurat object
s = Seurat::CreateSeuratObject(counts = cells_rna, meta.data = md, assay = "RNA", min.cells = 20)
# add DSB normalized "dsb_norm_prot" protein data to a assay called "CITE"
s[["CITE"]] = Seurat::CreateAssayObject(data = dsb_norm_prot)
# Add raw protein data
s[["RAWPROT"]] = Seurat::CreateAssayObject(data = cells_mtx_rawprot)
s@meta.data$HTO_T0_R = t(s@assays$RAWPROT["HTO-T0",])
s@meta.data$HTO_T1_R = t(s@assays$RAWPROT["HTO-T1",])
FeatureScatter(s, feature1 = "HTO_T0_R", feature2 = "HTO_T1_R")
s@meta.data$HTO_T0 = t(s@assays$CITE["HTO-T0",])
s@meta.data$HTO_T1 = t(s@assays$CITE["HTO-T1",])
FeatureScatter(s, feature1 = "HTO_T0", feature2 = "HTO_T1") + geom_hline(yintercept=2.5) + geom_vline(xintercept=2.7)
setwd('~/Downloads/namlab/')
data_dir <- '~/Downloads/namlab/raw_feature_bc_matrix'
outdir <- '~/Downloads/namlab/outdir'
unlink(outdir, recursive=TRUE)
knitr::opts_knit$set(root.dir = data_dir)
library(dsb)
library(Seurat)
library(ggplot2)
library(Matrix)
library(readr)
library(DropletUtils)
counts <- readMM("matrix.mtx.gz")
# Read in `genes.tsv`
genes <- read_tsv("features.tsv.gz", col_names = FALSE)
gene_ids <- genes$X1
# Read in `barcodes.tsv`
cell_ids <- read_tsv("barcodes.tsv.gz", col_names = FALSE)$X1
write10xCounts(outdir, counts, gene.id=genes$X1,
gene.symbol=genes$X2, gene.type = genes$X3, barcodes=cell_ids, version='3')
expression_matrix <- Read10X(outdir)
prot = expression_matrix$`Antibody Capture`
rna = expression_matrix$`Gene Expression`
rna_size = log10(Matrix::colSums(rna))
prot_size = log10(Matrix::colSums(prot))
ngene = Matrix::colSums(rna > 0)
mtgene = grep(pattern = "^MT-", rownames(rna), value = TRUE)
propmt = Matrix::colSums(rna[mtgene, ]) / Matrix::colSums(rna)
md = as.data.frame(cbind(propmt, rna_size, ngene, prot_size))
md$bc = rownames(md)
p1 = ggplot(md[md$rna_size > 0, ], aes(x = rna_size)) + geom_histogram(fill = "dodgerblue") + ggtitle("RNA library size \n distribution")
p2 = ggplot(md[md$prot_size> 0, ], aes(x = prot_size)) + geom_density(fill = "firebrick2") + ggtitle("Protein library size \n distribution")
cowplot::plot_grid(p1, p2, nrow = 1)
background_drops = md[md$prot_size > 1.4 & md$prot_size < 2.5 & md$ngene < 80, ]$bc
negative_mtx_rawprot = prot[ , background_drops] %>% as.matrix()
#positive_cells = md[md$prot_size > 2.8 & md$ngene < 3000 & md$ngene > 200 & propmt <0.1, ]$bc
positive_cells = md[md$ngene > 200 & propmt <0.1, ]$bc
positive_cells = na.omit(positive_cells)
cells_mtx_rawprot = prot[ , positive_cells] %>% as.matrix()
length(positive_cells)
dsb_norm_prot = DSBNormalizeProtein(
cell_protein_matrix = cells_mtx_rawprot, # cell containing droplets
empty_drop_matrix = negative_mtx_rawprot, # estimate ambient noise with the background drops
denoise.counts = TRUE, # model and remove each cell's technical component
use.isotype.control = FALSE, # use isotype controls to define the technical component
#isotype.control.name.vec = rownames(cells_mtx_rawprot)[1:10] # names of isotype control abs
)
# filter raw protein, RNA and metadata to only include cell-containing droplets
cells_rna = rna[ ,positive_cells]
md = md[positive_cells, ]
# create Seurat object
s = Seurat::CreateSeuratObject(counts = cells_rna, meta.data = md, assay = "RNA", min.cells = 20)
# add DSB normalized "dsb_norm_prot" protein data to a assay called "CITE"
s[["CITE"]] = Seurat::CreateAssayObject(data = dsb_norm_prot)
# Add raw protein data
s[["RAWPROT"]] = Seurat::CreateAssayObject(data = cells_mtx_rawprot)
s@meta.data$HTO_T0_R = t(s@assays$RAWPROT["HTO-T0",])
s@assays$RAWPROT
s@assays$RAWPROT["HT09"]
s@assays$RAWPROT["HTO9"]
setwd('~/Downloads/namlab/')
data_dir <- '~/Downloads/namlab/raw_feature_bc_matrix'
outdir <- '~/Downloads/namlab/outdir'
unlink(outdir, recursive=TRUE)
knitr::opts_knit$set(root.dir = data_dir)
library(dsb)
library(Seurat)
library(ggplot2)
library(Matrix)
library(readr)
library(DropletUtils)
s@meta.data$HTO9_R = t(s@assays$RAWPROT["HTO9",])
s@meta.data$HTO10_R = t(s@assays$RAWPROT["HTO10",])
FeatureScatter(s, feature1 = "HTO9_R", feature2 = "HTO10_R")
setwd('~/Downloads/namlab/')
data_dir <- '~/Downloads/namlab/raw_feature_bc_matrix'
outdir <- '~/Downloads/namlab/outdir'
unlink(outdir, recursive=TRUE)
knitr::opts_knit$set(root.dir = data_dir)
library(dsb)
library(Seurat)
library(ggplot2)
library(Matrix)
library(readr)
library(DropletUtils)
counts <- readMM("matrix.mtx.gz")
# Read in `genes.tsv`
genes <- read_tsv("features.tsv.gz", col_names = FALSE)
gene_ids <- genes$X1
# Read in `barcodes.tsv`
cell_ids <- read_tsv("barcodes.tsv.gz", col_names = FALSE)$X1
write10xCounts(outdir, counts, gene.id=genes$X1,
gene.symbol=genes$X2, gene.type = genes$X3, barcodes=cell_ids, version='3')
length(cell_ids)
setwd('~/Downloads/namlab/')
data_dir <- '~/Downloads/namlab/raw_feature_bc_matrix'
outdir <- '~/Downloads/namlab/outdir'
unlink(outdir, recursive=TRUE)
knitr::opts_knit$set(root.dir = data_dir)
library(dsb)
library(Seurat)
library(ggplot2)
library(Matrix)
library(readr)
library(DropletUtils)
counts <- readMM("matrix.mtx.gz")
# Read in `genes.tsv`
genes <- read_tsv("features.tsv.gz", col_names = FALSE)
gene_ids <- genes$X1
# Read in `barcodes.tsv`
cell_ids <- read_tsv("barcodes.tsv.gz", col_names = FALSE)$X1
write10xCounts(outdir, counts, gene.id=genes$X1,
gene.symbol=genes$X2, gene.type = genes$X3, barcodes=cell_ids, version='3')
expression_matrix <- Read10X(outdir)
prot = expression_matrix$`Antibody Capture`
rna = expression_matrix$`Gene Expression`
rna_size = log10(Matrix::colSums(rna))
prot_size = log10(Matrix::colSums(prot))
ngene = Matrix::colSums(rna > 0)
mtgene = grep(pattern = "^MT-", rownames(rna), value = TRUE)
propmt = Matrix::colSums(rna[mtgene, ]) / Matrix::colSums(rna)
md = as.data.frame(cbind(propmt, rna_size, ngene, prot_size))
md$bc = rownames(md)
p1 = ggplot(md[md$rna_size > 0, ], aes(x = rna_size)) + geom_histogram(fill = "dodgerblue") + ggtitle("RNA library size \n distribution")
p2 = ggplot(md[md$prot_size> 0, ], aes(x = prot_size)) + geom_density(fill = "firebrick2") + ggtitle("Protein library size \n distribution")
cowplot::plot_grid(p1, p2, nrow = 1)
background_drops = md[md$prot_size > 1.4 & md$prot_size < 2.5 & md$ngene < 80, ]$bc
negative_mtx_rawprot = prot[ , background_drops] %>% as.matrix()
#positive_cells = md[md$prot_size > 2.8 & md$ngene < 3000 & md$ngene > 200 & propmt <0.1, ]$bc
positive_cells = md[md$ngene > 200 & propmt <0.1, ]$bc
positive_cells = na.omit(positive_cells)
cells_mtx_rawprot = prot[ , positive_cells] %>% as.matrix()
length(positive_cells)
dsb_norm_prot = DSBNormalizeProtein(
cell_protein_matrix = cells_mtx_rawprot, # cell containing droplets
empty_drop_matrix = negative_mtx_rawprot, # estimate ambient noise with the background drops
denoise.counts = TRUE, # model and remove each cell's technical component
use.isotype.control = FALSE, # use isotype controls to define the technical component
#isotype.control.name.vec = rownames(cells_mtx_rawprot)[1:10] # names of isotype control abs
)
# filter raw protein, RNA and metadata to only include cell-containing droplets
cells_rna = rna[ ,positive_cells]
md = md[positive_cells, ]
# create Seurat object
s = Seurat::CreateSeuratObject(counts = cells_rna, meta.data = md, assay = "RNA", min.cells = 20)
# add DSB normalized "dsb_norm_prot" protein data to a assay called "CITE"
s[["CITE"]] = Seurat::CreateAssayObject(data = dsb_norm_prot)
# Add raw protein data
s[["RAWPROT"]] = Seurat::CreateAssayObject(data = cells_mtx_rawprot)
s@meta.data$HTO_T0_R = t(s@assays$RAWPROT["HTO-T0",])
length(cell_ids)
length(counts)
length(genes$X1)
length(genes$X2)
length(genes$X3)
length(genes)
dim(cell_ids)
dim(counts)
dim(genes)
dim(genes$X1)
dim(counts)
length(cell_ids)
setwd('~/Downloads/namlab/')
data_dir <- '~/Downloads/namlab/raw_feature_bc_matrix'
outdir <- '~/Downloads/namlab/outdir'
unlink(outdir, recursive=TRUE)
knitr::opts_knit$set(root.dir = data_dir)
library(dsb)
library(Seurat)
library(ggplot2)
library(Matrix)
library(readr)
library(DropletUtils)
counts <- readMM("matrix.mtx.gz")
# Read in `genes.tsv`
genes <- read_tsv("features.tsv.gz", col_names = FALSE)
gene_ids <- genes$X1
# Read in `barcodes.tsv`
cell_ids <- read_tsv("barcodes.tsv.gz", col_names = FALSE)$X1
write10xCounts(outdir, counts, gene.id=genes$X1,
gene.symbol=genes$X2, gene.type = genes$X3, barcodes=cell_ids, version='3')
expression_matrix <- Read10X(outdir)
prot = expression_matrix$`Antibody Capture`
rna = expression_matrix$`Gene Expression`
rna_size = log10(Matrix::colSums(rna))
prot_size = log10(Matrix::colSums(prot))
ngene = Matrix::colSums(rna > 0)
mtgene = grep(pattern = "^MT-", rownames(rna), value = TRUE)
propmt = Matrix::colSums(rna[mtgene, ]) / Matrix::colSums(rna)
md = as.data.frame(cbind(propmt, rna_size, ngene, prot_size))
md$bc = rownames(md)
p1 = ggplot(md[md$rna_size > 0, ], aes(x = rna_size)) + geom_histogram(fill = "dodgerblue") + ggtitle("RNA library size \n distribution")
p2 = ggplot(md[md$prot_size> 0, ], aes(x = prot_size)) + geom_density(fill = "firebrick2") + ggtitle("Protein library size \n distribution")
cowplot::plot_grid(p1, p2, nrow = 1)
background_drops = md[md$prot_size > 1.4 & md$prot_size < 2.5 & md$ngene < 80, ]$bc
negative_mtx_rawprot = prot[ , background_drops] %>% as.matrix()
#positive_cells = md[md$prot_size > 2.8 & md$ngene < 3000 & md$ngene > 200 & propmt <0.1, ]$bc
positive_cells = md[md$ngene > 200 & propmt <0.1, ]$bc
positive_cells = na.omit(positive_cells)
cells_mtx_rawprot = prot[ , positive_cells] %>% as.matrix()
length(positive_cells)
dsb_norm_prot = DSBNormalizeProtein(
cell_protein_matrix = cells_mtx_rawprot, # cell containing droplets
empty_drop_matrix = negative_mtx_rawprot, # estimate ambient noise with the background drops
denoise.counts = TRUE, # model and remove each cell's technical component
use.isotype.control = FALSE, # use isotype controls to define the technical component
#isotype.control.name.vec = rownames(cells_mtx_rawprot)[1:10] # names of isotype control abs
)
# filter raw protein, RNA and metadata to only include cell-containing droplets
cells_rna = rna[ ,positive_cells]
md = md[positive_cells, ]
# create Seurat object
s = Seurat::CreateSeuratObject(counts = cells_rna, meta.data = md, assay = "RNA", min.cells = 20)
# add DSB normalized "dsb_norm_prot" protein data to a assay called "CITE"
s[["CITE"]] = Seurat::CreateAssayObject(data = dsb_norm_prot)
# Add raw protein data
s[["RAWPROT"]] = Seurat::CreateAssayObject(data = cells_mtx_rawprot)
s@meta.data$HTO9_R = t(s@assays$RAWPROT["HTO9",])
s@meta.data$HTO10_R = t(s@assays$RAWPROT["HTO10",])
FeatureScatter(s, feature1 = "HTO9_R", feature2 = "HTO10_R")
s@meta.data$HTO_T0 = t(s@assays$CITE["HTO-T0",])
s@meta.data$HTO9 = t(s@assays$RAWPROT["HTO9",])
s@meta.data$HTO10 = t(s@assays$RAWPROT["HTO10",])
FeatureScatter(s, feature1 = "HTO9_R", feature2 = "HTO10_R")
setwd('~/Downloads/namlab/')
data_dir <- '~/Downloads/namlab/raw_feature_bc_matrix'
outdir <- '~/Downloads/namlab/outdir'
unlink(outdir, recursive=TRUE)
knitr::opts_knit$set(root.dir = data_dir)
library(dsb)
library(Seurat)
library(ggplot2)
library(Matrix)
library(readr)
library(DropletUtils)
counts <- readMM("matrix.mtx.gz")
# Read in `genes.tsv`
genes <- read_tsv("features.tsv.gz", col_names = FALSE)
gene_ids <- genes$X1
# Read in `barcodes.tsv`
cell_ids <- read_tsv("barcodes.tsv.gz", col_names = FALSE)$X1
write10xCounts(outdir, counts, gene.id=genes$X1,
gene.symbol=genes$X2, gene.type = genes$X3, barcodes=cell_ids, version='3')
length(gene_ids)
dim(counts)
length(cell_ids)
s@assays$RAWPROT
s@meta.data$HTO9_RAW = t(s@assays$RAWPROT["HTO9",])
s@meta.data$HTO10_RAW = t(s@assays$RAWPROT["HTO10",])
FeatureScatter(s, feature1 = "HTO9_RAW", feature2 = "HTO10_RAW")
s@assays$CITE
s@meta.data$HTO9_NORM = t(s@assays$CITE["HTO9",])
s@meta.data$HTO10_NORM = t(s@assays$CITE["HTO10",])
FeatureScatter(s, feature1 = "HTO_T0", feature2 = "HTO_T1") + geom_hline(yintercept=2.5) + geom_vline(xintercept=2.7)
FeatureScatter(s, feature1 = "HTO9_NORM", feature2 = "HTO10_NORM") + geom_hline(yintercept=2.5) + geom_vline(xintercept=2.7)
setwd('~/Downloads/namlab/')
data_dir <- '~/Downloads/namlab/raw_feature_bc_matrix'
outdir <- '~/Downloads/namlab/outdir'
unlink(outdir, recursive=TRUE)
knitr::opts_knit$set(root.dir = data_dir)
library(dsb)
library(Seurat)
library(ggplot2)
library(Matrix)
library(readr)
library(DropletUtils)
setwd('~/Downloads/namlab/')
data_dir <- '~/Downloads/namlab/raw_feature_bc_matrix'
outdir <- '~/Downloads/namlab/outdir'
unlink(outdir, recursive=TRUE)
knitr::opts_knit$set(root.dir = data_dir)
library(dsb)
library(Seurat)
library(ggplot2)
library(Matrix)
library(readr)
library(DropletUtils)
counts <- readMM("matrix.mtx.gz")
# Read in `genes.tsv`
genes <- read_tsv("features.tsv.gz", col_names = FALSE)
gene_ids <- genes$X1
# Read in `barcodes.tsv`
cell_ids <- read_tsv("barcodes.tsv.gz", col_names = FALSE)$X1
write10xCounts(outdir, counts, gene.id=genes$X1,
gene.symbol=genes$X2, gene.type = genes$X3, barcodes=cell_ids, version='3')
expression_matrix <- Read10X(outdir)
prot = expression_matrix$`Antibody Capture`
rna = expression_matrix$`Gene Expression`
rna_size = log10(Matrix::colSums(rna))
prot_size = log10(Matrix::colSums(prot))
ngene = Matrix::colSums(rna > 0)
mtgene = grep(pattern = "^MT-", rownames(rna), value = TRUE)
propmt = Matrix::colSums(rna[mtgene, ]) / Matrix::colSums(rna)
md = as.data.frame(cbind(propmt, rna_size, ngene, prot_size))
md$bc = rownames(md)
p1 = ggplot(md[md$rna_size > 0, ], aes(x = rna_size)) + geom_histogram(fill = "dodgerblue") + ggtitle("RNA library size \n distribution")
p2 = ggplot(md[md$prot_size> 0, ], aes(x = prot_size)) + geom_density(fill = "firebrick2") + ggtitle("Protein library size \n distribution")
cowplot::plot_grid(p1, p2, nrow = 1)
background_drops = md[md$prot_size > 1.4 & md$prot_size < 2.5 & md$ngene < 80, ]$bc
negative_mtx_rawprot = prot[ , background_drops] %>% as.matrix()
#positive_cells = md[md$prot_size > 2.8 & md$ngene < 3000 & md$ngene > 200 & propmt <0.1, ]$bc
positive_cells = md[md$ngene > 200 & propmt <0.1, ]$bc
positive_cells = na.omit(positive_cells)
cells_mtx_rawprot = prot[ , positive_cells] %>% as.matrix()
length(positive_cells)
dsb_norm_prot = DSBNormalizeProtein(
cell_protein_matrix = cells_mtx_rawprot, # cell containing droplets
empty_drop_matrix = negative_mtx_rawprot, # estimate ambient noise with the background drops
denoise.counts = TRUE, # model and remove each cell's technical component
use.isotype.control = FALSE, # use isotype controls to define the technical component
#isotype.control.name.vec = rownames(cells_mtx_rawprot)[1:10] # names of isotype control abs
)
# filter raw protein, RNA and metadata to only include cell-containing droplets
cells_rna = rna[ ,positive_cells]
md = md[positive_cells, ]
# create Seurat object
s = Seurat::CreateSeuratObject(counts = cells_rna, meta.data = md, assay = "RNA", min.cells = 20)
# add DSB normalized "dsb_norm_prot" protein data to a assay called "CITE"
s[["CITE"]] = Seurat::CreateAssayObject(data = dsb_norm_prot)
# Add raw protein data
s[["RAWPROT"]] = Seurat::CreateAssayObject(data = cells_mtx_rawprot)
s@meta.data$HTO9_RAW = t(s@assays$RAWPROT["HTO9",])
s@meta.data$HTO10_RAW = t(s@assays$RAWPROT["HTO10",])
FeatureScatter(s, feature1 = "HTO9_RAW", feature2 = "HTO10_RAW")
s@meta.data$HTO9_NORM = t(s@assays$CITE["HTO9",])
s@meta.data$HTO10_NORM = t(s@assays$CITE["HTO10",])
FeatureScatter(s, feature1 = "HTO9_NORM", feature2 = "HTO10_NORM")# + geom_hline(yintercept=2.5) + geom_vline(xintercept=2.7)
s@assays$CITE
FeatureScatter(s, feature1 = "HTO9_NORM", feature2 = "HTO10_NORM", group.by = feature1)# + geom_hline(yintercept=2.5) + geom_vline(xintercept=2.7)
FeatureScatter(s, feature1 = "HTO9_NORM", feature2 = "HTO10_NORM")# + geom_hline(yintercept=2.5) + geom_vline(xintercept=2.7)
background_drops = md[md$prot_size > 1.4 & md$prot_size < 2.5 & md$ngene < 80, ]$bc
negative_mtx_rawprot = prot[ , background_drops] %>% as.matrix()
positive_cells = md[md$prot_size > 2.8 & md$ngene < 3000 & md$ngene > 200 & propmt <0.1, ]$bc
#positive_cells = md[md$ngene > 200 & propmt <0.1, ]$bc
positive_cells = na.omit(positive_cells)
cells_mtx_rawprot = prot[ , positive_cells] %>% as.matrix()
length(positive_cells)
background_drops = md[md$prot_size > 1.4 & md$prot_size < 2.5 & md$ngene < 80, ]$bc
negative_mtx_rawprot = prot[ , background_drops] %>% as.matrix()
#positive_cells = md[md$prot_size > 2.8 & md$ngene < 3000 & md$ngene > 200 & propmt <0.1, ]$bc
positive_cells = md[md$ngene > 200 & propmt <0.1, ]$bc
positive_cells = na.omit(positive_cells)
cells_mtx_rawprot = prot[ , positive_cells] %>% as.matrix()
FeatureScatter(s, feature1 = "HTO10_NORM", feature2 = "HTO9_NORM")# + geom_hline(yintercept=2.5) + geom_vline(xintercept=2.7)
9
FeatureScatter(s, feature1 = "HTO9_NORM", feature2 = "HTO10_NORM")# + geom_hline(yintercept=2.5) + geom_vline(xintercept=2.7)
setwd("~/Downloads/asi/project/atac/callpeak_broad")
atac_broad = "atac_broad_combined_bed.txt"
head(atac_broad)
atac_broad = read.csv("atac_broad_combined_bed.txt")
atac_broad = read.table("atac_broad_combined_bed.txt")
atac_broad = read.csv("atac_broad_combined_bed.csv")
atac_narrow = read.csv("~/Downloads/asi/project/atac/callpeak_narrow/atac_narrow_combined_bed.csv")
rna = read.csv("~/Downloads/asi/project/rna/rna_df.csv")
chip = read.csv("~/Downloads/asi/project/chip/chip_combined.csv")
chip = read.csv("~/Downloads/asi/project/chip/chip_combined_bed.csv")
chip = read.csv("~/Downloads/asi/project/chip/callpeak/chip_combined_bed.csv")
head(atac_narrow)
head(chip)
atac_narrow = read.csv("~/Downloads/asi/project/atac/callpeak_narrow/atac_narrow_combined_bed.csv")
atac_broad = read.csv("~/Downloads/asi/project/atac/callpeak_broad/atac_broad_combined_bed.csv")
rna = read.csv("~/Downloads/asi/project/rna/rna_df.csv")
chip = read.csv("~/Downloads/asi/project/chip/callpeak/chip_combined_bed.csv")
View(rna)
View(rna)
rna$X
colnames(chip)
rownames(chip)
as.character(rownames(chip))
as.character(rna$X)
intersect(as.character(rna$X), rownames(atac_narrow), rownames(chip))
intersect(as.character(rna$X), rownames(atac_narrow))#, rownames(chip))
int2 = intersect(int1, rownames(chip))
int1 = intersect(as.character(rna$X), rownames(atac_narrow))
int2 = intersect(int1, rownames(chip))
length(int2)
int1 = intersect(as.character(rna$X), rownames(atac_broad))
int2 = intersect(int1, rownames(chip))
length(int2)
int1 = intersect(as.character(rna$X), rownames(atac_broad))
#int1 = intersect(as.character(rna$X), rownames(atac_narrow))
int2 = intersect(int1, rownames(chip))
broad1 = intersect(as.character(rna$X), rownames(atac_broad))
broad2 = intersect(broad, rownames(chip))
narrow1 = intersect(as.character(rna$X), rownames(atac_narrow))
atac_narrow = read.csv("~/Downloads/asi/project/atac/callpeak_narrow/atac_narrow_combined_bed.csv")
atac_broad = read.csv("~/Downloads/asi/project/atac/callpeak_broad/atac_broad_combined_bed.csv")
rna = read.csv("~/Downloads/asi/project/rna/rna_df.csv")
chip = read.csv("~/Downloads/asi/project/chip/callpeak/chip_combined_bed.csv")
broad1 = intersect(as.character(rna$X), rownames(atac_broad))
broad2 = intersect(broad1, rownames(chip))
narrow1 = intersect(as.character(rna$X), rownames(atac_narrow))
narrow2 = intersect(narrow1, rownames(chip))
length(broad2)
length(narrow2)
write.csv(broad2, "~/Downloads/asi/project/broad.csv")
write.csv(narrow2, "~/Downloads/asi/project/narrowe.csv")
write.csv(narrow2, "~/Downloads/asi/project/narrow.csv")
library(org.Hs.eg.db)
x <- org.Hs.egPATH
head(x)
x
mapped_genes <- mappedkeys(x)
head(mapped_genes)
head(narrow)
head(narrow2)
xx <- as.list(x[mapped_genes])
xx[1:5]
write.csv(broad2, "~/Downloads/asi/project/broad.csv", header = FALSE)
write.csv(broad2, "~/Downloads/asi/project/broad.csv", col.names = FALSE)
write.table(broad2, "~/Downloads/asi/project/broad.csv", col.names = FALSE)
write.table(broad2, "~/Downloads/asi/project/broad.csv", sep = ",", col.names = FALSE)
write.table(broad2, "~/Downloads/asi/project/broad.csv", sep = ",", row.names = FALSE, col.names = FALSE)
write.table(narrow2, "~/Downloads/asi/project/narrow.csv", sep = ",", row.names = FALSE, col.names = FALSE))
write.table(narrow2, "~/Downloads/asi/project/narrow.csv", sep = ",", row.names = FALSE, col.names = FALSE)
combine = read.csv("~/Downloads/asi/project/broad_int.csv")
head(broad_int)
broad_int = read.csv("~/Downloads/asi/project/broad_int.csv")
head(broad_int)
broad_int$Entrez.ID
rownames(broad_int)
rownames(chip)
head(chip)
chip$Entrez.ID
rownames(chip)
rna$X
chip$Entrez.ID
rownames(atac_broad)
#broad1 = intersect(as.character(rna$X), rownames(atac_broad))
broad1 = intersect(rna$X, atac_broad$Entrez.ID)
length(broad1)
broad2 = intersect(broad1, chip$Entrez.ID)
length(broad2)
narrow1 = intersect(rna$X, atac_narrow$Entrez.ID)
narrow2 = intersect(narrow1, chip$Entrez.ID)
length(narrow2)
write.table(broad2, "~/Downloads/asi/project/broad.csv", sep = ",", row.names = FALSE, col.names = FALSE)
write.table(narrow2, "~/Downloads/asi/project/narrow.csv", sep = ",", row.names = FALSE, col.names = FALSE)
broad_int = read.csv("~/Downloads/asi/project/broad_int.csv")
broad_int = read.csv("~/Downloads/asi/project/broad_int.csv")
broad_rna = intersect(rna$X, broad_int$Entrez.ID)
length(broad_rna)
narrow_int = read.csv("~/Downloads/asi/project/narrow_int.csv")
broad_int = read.csv("~/Downloads/asi/project/broad_int.csv")
broad_rna = intersect(rna$X, broad_int$Entrez.ID)
length(broad_rna)
narrow_int = read.csv("~/Downloads/asi/project/narrow_int.csv")
narrow_rna = intersect(rna$X, narrow_int$Entrez.ID)
length(narrow_rna)
write.table(broad_rna, "~/Downloads/asi/project/broad_rna.csv", sep = ",", row.names = FALSE, col.names = FALSE)
write.table(narrow_rna, "~/Downloads/asi/project/narrow_rna.csv", sep = ",", row.names = FALSE, col.names = FALSE)
install.packages("gprofiler2")
library(gprofiler2)
gostres <- gost(query = broad_rna,
organism = "hsapiens", ordered_query = FALSE,
multi_query = FALSE, significant = TRUE, exclude_iea = FALSE,
measure_underrepresentation = FALSE, evcodes = FALSE,
user_threshold = 0.05, correction_method = "g_SCS",
domain_scope = "annotated", custom_bg = NULL,
numeric_ns = "", sources = NULL, as_short_link = FALSE)
head(gostres$result)
gostplot(gostres, capped = TRUE, interactive = TRUE)
write.csv(gostres, "gostres.csv")
write.table(gostres, "gostres.csv")
gostres
gostres$result
write.csv(gostres$result, "gostres.csv")
View(gostres)
publish_gosttable(gostres,
use_colors = TRUE,
show_columns = c("source", "term_name", "term_size", "intersection_size"),
filename = NULL)
gostres[["result"]]
dim(gostres[["result"]])
gostres <- gost(query = broad2,
organism = "hsapiens", ordered_query = FALSE,
multi_query = FALSE, significant = TRUE, exclude_iea = FALSE,
measure_underrepresentation = FALSE, evcodes = FALSE,
user_threshold = 0.05, correction_method = "g_SCS",
domain_scope = "annotated", custom_bg = NULL,
numeric_ns = "", sources = NULL, as_short_link = FALSE)
gostplot(gostres, capped = FALSE, interactive = TRUE)
gostres <- gost(query = narrow2,
organism = "hsapiens", ordered_query = FALSE,
multi_query = FALSE, significant = TRUE, exclude_iea = FALSE,
measure_underrepresentation = FALSE, evcodes = FALSE,
user_threshold = 0.05, correction_method = "g_SCS",
domain_scope = "annotated", custom_bg = NULL,
numeric_ns = "", sources = NULL, as_short_link = FALSE)
gostplot(gostres, capped = FALSE, interactive = TRUE)
length(intersect(broad2, broad_rna))
length(broad2)
length(broad_rna)
length(diff(broad2, broad_rna))
length(setdiff(broad2, broad_rna))
