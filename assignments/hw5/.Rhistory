samples
colnames(design) <- levels(samples$batch)
design
CountTable <- read.csv("kal2.csv", header=TRUE, row.names=1)
dgList <- DGEList(counts=CountTable, genes=rownames(CountTable))
samples <- read.table("sample.txt", header=TRUE)
batch <- factor(samples$batch)
cond <- factor(samples$condition, levels=c("Ctrl","siRNA"))
design <- model.matrix(~batch+cond)
colnames(design) <- levels(samples$batch)
design
colnames(design) <- levels(dgList$samples$batch)
design
CountTable <- read.csv("kal2.csv", header=TRUE, row.names=1)
dgList <- DGEList(counts=CountTable, genes=rownames(CountTable))
samples <- read.table("sample.txt", header=TRUE)
batch <- factor(samples$batch)
cond <- factor(samples$condition, levels=c("Ctrl","siRNA"))
design <- model.matrix(~batch+cond)
colnames(design) <- levels(dgList$samples$batch)
design
CountTable <- read.csv("kal2.csv", header=TRUE, row.names=1)
dgList <- DGEList(counts=CountTable, genes=rownames(CountTable))
samples <- read.table("sample.txt", header=TRUE)
batch <- factor(samples$batch)
cond <- factor(samples$condition, levels=c("Ctrl","siRNA"))
design <- model.matrix(~0+batch+cond)
colnames(design) <- levels(dgList$samples$batch)
design
CountTable <- read.csv("kal2.csv", header=TRUE, row.names=1)
dgList <- DGEList(counts=CountTable, genes=rownames(CountTable))
samples <- read.table("sample.txt", header=TRUE)
batch <- factor(samples$batch)
cond <- factor(samples$condition, levels=c("Ctrl","siRNA"))
design <- model.matrix(~0+batch+cond)
CountTable <- read.csv("kal2.csv", header=TRUE, row.names=1)
y <- DGEList(counts=CountTable, genes=rownames(CountTable))
samples <- read.table("sample.txt", header=TRUE)
batch <- factor(samples$batch)
cond <- factor(samples$condition, levels=c("Ctrl","siRNA"))
design <- model.matrix(~0+batch+cond)
fit <- glmQLFit(y, design)
CountTable <- read.csv("kal2.csv", header=TRUE, row.names=1)
dgList <- DGEList(counts=CountTable, genes=rownames(CountTable))
# isexpr <- rowSums(cpm(dge) > 1) >=3 # require a minimum counts per million
isexpr <- rowSums(dgList$counts > 30) >=6 # or we can specify a minimum count
isexpr
sum(isexpr)/nrow(dgList)
CountTable <- read.csv("kal2.csv", header=TRUE, row.names=1)
dgList <- DGEList(counts=CountTable, genes=rownames(CountTable))
isexpr <- rowSums(cpm(dge) > 1) >=3 # require a minimum counts per million
isexpr <- rowSums(cpm(dgList) > 1) >=3 # require a minimum counts per million
sum(isexpr)/nrow(dgList)
CountTable <- read.csv("kal2.csv", header=TRUE, row.names=1)
isexpr <- rowSums(cpm(dgList) > 1) >=3 # require a minimum counts per million
countCheck <- countsPerMillion > 1
keep <- which(rowSums(countCheck) >= 2)
dgList <- dgList[keep,]
#dgList <- calcNormFactors(dgList, method="TMM")
plotMDS(dgList)
library(edgeR)
CountTable <- read.csv("kal2.csv", header=TRUE, row.names=1)
dgList <- DGEList(counts=CountTable, genes=rownames(CountTable))
isexpr <- rowSums(cpm(dgList) > 1) >=3 # require a minimum counts per million
#isexpr <- rowSums(dgList$counts > 30) >=6 # or we can specify a minimum count
sum(isexpr)/nrow(dgList)
countsPerMillion <- cpm(dgList)
countCheck <- countsPerMillion > 1
keep <- which(rowSums(countCheck) >= 2)
dgList <- dgList[keep,]
#dgList <- calcNormFactors(dgList, method="TMM")
plotMDS(dgList)
samples <- read.table("sample.txt", header=TRUE)
batch <- factor(samples$batch)
cond <- factor(samples$condition, levels=c("Ctrl","siRNA"))
#sampleType<- rep("Ctrl", ncol(dgList))
#sampleType[grep("siRNA", colnames(dgList))] <- "siRNA"
#sampleReplicate <- paste("S", rep(1:3, each=2), sep="")
#designMat <- model.matrix(~sampleReplicate + sampleType)
#sampleType
design <- model.matrix(~batch+cond)
y <- estimateDisp(dgList,design)
fit <- glmQLFit(y, design)
qlf <- glmQLFTest(fit)
#ttags = topTags(qlf)
pval = 0.05
e_df_qlf<-as.data.frame(`qlf`)
e_df_qlf$Significant.Gene<-"No"
row_number<-which(e_df_qlf$PValue<pval & abs(e_df_qlf$logFC)>1)
e_df_qlf$Significant.Gene[row_number]<-"Yes"
e_df_qlf$Differential_Gene<-e_df_qlf$Significant.Gene
e_df_qlf$Differential_Gene[which(e_df_qlf$PValue< pval & e_df_qlf$logFC> 1)]<-"Up-Regulated"
e_df_qlf$Differential_Gene[which(e_df_qlf$PValue< pval & e_df_qlf$logFC< -1)]<-"Down-Regulated"
sub_e_qlf = subset(e_df_qlf, abs(e_df_qlf$logFC) > 1 & e_df_qlf$PValue < pval)
write.csv(sub_e_qlf, "sub_e_qlf.csv", row.names=TRUE)
write.csv(e_df_qlf, "e_df_qlf.csv", row.names=TRUE)
sub_ds <- read.csv("sub_ds2.csv", header=TRUE)#, row.names=1)
sub_et <- read.csv("sub_e_et.csv", header=TRUE)#, row.names=1)
sub_qlf <- read.csv("sub_e_qlf.csv", header=TRUE)#, row.names=1)
#intersect(sub_ds$Geneid, sub_et$Geneid)
intersect(sub_ds$Geneid, sub_qlf$genes)
sub_ds <- read.csv("sub_ds2.csv", header=TRUE)#, row.names=1)
sub_et <- read.csv("sub_e_et.csv", header=TRUE)#, row.names=1)
sub_qlf <- read.csv("sub_e_qlf.csv", header=TRUE)#, row.names=1)
#intersect(sub_ds$Geneid, sub_et$Geneid)
intersect(sub_ds$Geneid, sub_qlf$genes)
summary(sub_e_qlf)
sig.genes<-rownames(`Ctrl_siRNA_sig`)
#extract raw counts for these genes:
m<-match(sig.genes,rownames(norm_counts))
de_norm_counts<-norm_counts[m,]
library(pheatmap)
library(RColorBrewer)
sample<-as.data.frame(data$name)
colnames(sample)<-c("samples")
rownames(sample)<-colnames(de_norm_counts)
sample$samples<-as.character(data$condition)
sample2<-sample
sample2$samples[which(sample2$samples=="siRNA")]<-"#74c476"
sample2$samples[which(sample2$samples=="Ctrl")]<-"#ec7014"
sample3 = list(samples = c("siRNA"= "#74c476", "Ctrl"="#ec7014"))
#pdf("HEATMAP.pdf", width=10, height=5,useDingbats=FALSE)
pheatmap(de_norm_counts,scale = "row",show_rownames=FALSE,
colorRampPalette(rev(brewer.pal(n = 10, name ="RdBu")))(25),
clustering_method = "ward.D2",clustering_distance_cols ="euclidean",
annotation_col  = sample)
#dev.off()
ds2_df
colnames(ds2_df)
colnames(e_df_qlf)
pval = 0.05
e_df_qlf<-as.data.frame(`qlf`)
e_df_qlf$log10.pvalue<-(-1*log10(e_df_qlf$PValue))
e_df_qlf$Significant.Gene<-"No"
row_number<-which(e_df_qlf$PValue<pval & abs(e_df_qlf$logFC)>1)
e_df_qlf$Significant.Gene[row_number]<-"Yes"
e_df_qlf$Differential_Gene<-e_df_qlf$Significant.Gene
e_df_qlf$Differential_Gene[which(e_df_qlf$PValue< pval & e_df_qlf$logFC> 1)]<-"Up-Regulated"
e_df_qlf$Differential_Gene[which(e_df_qlf$PValue< pval & e_df_qlf$logFC< -1)]<-"Down-Regulated"
library(edgeR)
library(ggplot2)
library(ggrepel)
#RNA volcano
#make sure to adjust xlim and ylim based off of the data. Run hist(e_df_qlf$logFC) and hist(e_df_qlf$log10.pvalue) to get an idea
# pick a set of genes to label:
e_df_qlf$label<-"No"
e_df_qlf$label[which(e_df_qlf$PValue<0.05 & abs(e_df_qlf$logFC)>1)]<-"Yes"
# Here we add two further columns, the gene symbol (common name) and entrez ID - both of which may be useful downstream
e_df_qlf$symbol <- mapIds(org.Hs.eg.db, keys=row.names(e_df_qlf), column="SYMBOL", keytype="ENSEMBL", multiVals="first") # MAPS GENE IDs
library(ggplot2)
library(ggrepel)
#RNA volcano
#make sure to adjust xlim and ylim based off of the data. Run hist(e_df_qlf$logFC) and hist(e_df_qlf$log10.pvalue) to get an idea
# pick a set of genes to label:
e_df_qlf$label<-"No"
e_df_qlf$label[which(e_df_qlf$PValue<0.05 & abs(e_df_qlf$logFC)>1)]<-"Yes"
# Here we add two further columns, the gene symbol (common name) and entrez ID - both of which may be useful downstream
#e_df_qlf$symbol <- mapIds(org.Hs.eg.db, keys=row.names(e_df_qlf), column="SYMBOL", keytype="ENSEMBL", multiVals="first") # MAPS GENE IDs
#e_df_qlf$entrez <- mapIds(org.Hs.eg.db, keys=row.names(e_df_qlf), column="ENTREZID", keytype="ENSEMBL", multiVals="first")
#pdf("Volcano.pdf", width=8, height=4,useDingbats=FALSE)
pRNA <- ggplot(e_df_qlf, aes(logFC, log10.pvalue))+
geom_point(aes(colour = Differential_Gene),size=1)+
scale_colour_manual(values=c("blue", "black","red"))+
xlim(-6,6)+
ylim(0,5)+
xlab(expression(paste(log[2], 'FC(Ctrl/siRNA)')))+
ylab(expression(paste(-log[10], '(Q-value)'))) +
theme_bw() +
theme(panel.background = element_blank())+
theme(panel.border = element_rect(colour = "black", fill=NA, size=1))+
theme(text = element_text(size=10)) +
theme(plot.title = element_blank())+
theme(axis.text = element_text( color = "black", size = 10))+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line=element_line()) +
theme(legend.position="none")+
geom_vline(xintercept=-abs_log2fc,linetype="dotted")+
geom_vline(xintercept=abs_log2fc,linetype="dotted")+
geom_text_repel(
data = subset(e_df_qlf, label=="Yes"),
aes(label = e_df_qlf$symbol[which(label=="Yes")]),
size = 5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.5, "lines")
)
pRNA
library(ggplot2)
library(ggrepel)
#RNA volcano
#make sure to adjust xlim and ylim based off of the data. Run hist(e_df_qlf$logFC) and hist(e_df_qlf$log10.pvalue) to get an idea
# pick a set of genes to label:
e_df_qlf$label<-"No"
e_df_qlf$label[which(e_df_qlf$PValue<0.05 & abs(e_df_qlf$logFC)>1)]<-"Yes"
# Here we add two further columns, the gene symbol (common name) and entrez ID - both of which may be useful downstream
#e_df_qlf$symbol <- mapIds(org.Hs.eg.db, keys=row.names(e_df_qlf), column="SYMBOL", keytype="ENSEMBL", multiVals="first") # MAPS GENE IDs
#e_df_qlf$entrez <- mapIds(org.Hs.eg.db, keys=row.names(e_df_qlf), column="ENTREZID", keytype="ENSEMBL", multiVals="first")
#pdf("Volcano.pdf", width=8, height=4,useDingbats=FALSE)
pRNA <- ggplot(e_df_qlf, aes(logFC, log10.pvalue))+
geom_point(aes(colour = Differential_Gene),size=1)+
scale_colour_manual(values=c("blue", "black","red"))+
xlim(-6,6)+
ylim(0,5)+
xlab(expression(paste(log[2], 'FC(Ctrl/siRNA)')))+
ylab(expression(paste(-log[10], '(Q-value)'))) +
theme_bw() +
theme(panel.background = element_blank())+
theme(panel.border = element_rect(colour = "black", fill=NA, size=1))+
theme(text = element_text(size=10)) +
theme(plot.title = element_blank())+
theme(axis.text = element_text( color = "black", size = 10))+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line=element_line()) +
theme(legend.position="none")+
geom_vline(xintercept=-abs_log2fc,linetype="dotted")+
geom_vline(xintercept=abs_log2fc,linetype="dotted")+
geom_text_repel(
data = subset(e_df_qlf, label=="Yes"),
aes(label = e_df_qlf$symbol[which(Differential_Gene=="Yes")]),
size = 5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.5, "lines")
)
pRNA
library(ggplot2)
library(ggrepel)
#RNA volcano
#make sure to adjust xlim and ylim based off of the data. Run hist(e_df_qlf$logFC) and hist(e_df_qlf$log10.pvalue) to get an idea
# pick a set of genes to label:
e_df_qlf$label<-"No"
e_df_qlf$label[which(e_df_qlf$PValue<0.05 & abs(e_df_qlf$logFC)>1)]<-"Yes"
# Here we add two further columns, the gene symbol (common name) and entrez ID - both of which may be useful downstream
#e_df_qlf$symbol <- mapIds(org.Hs.eg.db, keys=row.names(e_df_qlf), column="SYMBOL", keytype="ENSEMBL", multiVals="first") # MAPS GENE IDs
#e_df_qlf$entrez <- mapIds(org.Hs.eg.db, keys=row.names(e_df_qlf), column="ENTREZID", keytype="ENSEMBL", multiVals="first")
#pdf("Volcano.pdf", width=8, height=4,useDingbats=FALSE)
pRNA <- ggplot(e_df_qlf, aes(logFC, log10.pvalue))+
geom_point(aes(colour = Differential_Gene),size=1)+
scale_colour_manual(values=c("blue", "black","red"))+
xlim(-6,6)+
ylim(0,5)+
xlab(expression(paste(log[2], 'FC(Ctrl/siRNA)')))+
ylab(expression(paste(-log[10], '(Q-value)'))) +
theme_bw() +
theme(panel.background = element_blank())+
theme(panel.border = element_rect(colour = "black", fill=NA, size=1))+
theme(text = element_text(size=10)) +
theme(plot.title = element_blank())+
theme(axis.text = element_text( color = "black", size = 10))+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line=element_line()) +
theme(legend.position="none")+
geom_vline(xintercept=-abs_log2fc,linetype="dotted")+
geom_vline(xintercept=abs_log2fc,linetype="dotted")+
geom_text_repel(
data = subset(e_df_qlf, Differential_Gene=="Yes"),
aes(label = e_df_qlf$symbol[which(Differential_Gene=="Yes")]),
size = 5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.5, "lines")
)
pRNA
# Here we add two further columns, the gene symbol (common name) and entrez ID - both of which may be useful downstream
e_df_qlf$symbol <- mapIds(org.Hs.eg.db, keys=row.names(e_df_qlf), column="SYMBOL", keytype="ENSEMBL", multiVals="first") # MAPS GENE IDs
library(edgeR)
library("DESeq2")
library("pheatmap")
library("RColorBrewer")
library("vsn")
library("AnnotationDbi")
library("org.Hs.eg.db")
library("genefilter")
library("biomaRt")
library("IHW")
CountTable <- read.csv("kal2.csv", header=TRUE, row.names=1)
dgList <- DGEList(counts=CountTable, genes=rownames(CountTable))
isexpr <- rowSums(cpm(dgList) > 1) >=3 # require a minimum counts per million
#isexpr <- rowSums(dgList$counts > 30) >=6 # or we can specify a minimum count
sum(isexpr)/nrow(dgList)
countsPerMillion <- cpm(dgList)
countCheck <- countsPerMillion > 1
keep <- which(rowSums(countCheck) >= 2)
dgList <- dgList[keep,]
#dgList <- calcNormFactors(dgList, method="TMM")
plotMDS(dgList)
samples <- read.table("sample.txt", header=TRUE)
batch <- factor(samples$batch)
cond <- factor(samples$condition, levels=c("Ctrl","siRNA"))
#sampleType<- rep("Ctrl", ncol(dgList))
#sampleType[grep("siRNA", colnames(dgList))] <- "siRNA"
#sampleReplicate <- paste("S", rep(1:3, each=2), sep="")
#designMat <- model.matrix(~sampleReplicate + sampleType)
#sampleType
design <- model.matrix(~batch+cond)
y <- estimateDisp(dgList,design)
fit <- glmQLFit(y, design)
qlf <- glmQLFTest(fit)
#ttags = topTags(qlf)
pval = 0.05
e_df_qlf<-as.data.frame(`qlf`)
e_df_qlf$log10.pvalue<-(-1*log10(e_df_qlf$PValue))
e_df_qlf$Significant.Gene<-"No"
row_number<-which(e_df_qlf$PValue<pval & abs(e_df_qlf$logFC)>1)
e_df_qlf$Significant.Gene[row_number]<-"Yes"
e_df_qlf$Differential_Gene<-e_df_qlf$Significant.Gene
e_df_qlf$Differential_Gene[which(e_df_qlf$PValue< pval & e_df_qlf$logFC> 1)]<-"Up-Regulated"
e_df_qlf$Differential_Gene[which(e_df_qlf$PValue< pval & e_df_qlf$logFC< -1)]<-"Down-Regulated"
sub_e_qlf = subset(e_df_qlf, abs(e_df_qlf$logFC) > 1 & e_df_qlf$PValue < pval)
write.csv(sub_e_qlf, "sub_e_qlf.csv", row.names=TRUE)
write.csv(e_df_qlf, "e_df_qlf.csv", row.names=TRUE)
library(ggplot2)
library(ggrepel)
#RNA volcano
#make sure to adjust xlim and ylim based off of the data. Run hist(e_df_qlf$logFC) and hist(e_df_qlf$log10.pvalue) to get an idea
# pick a set of genes to label:
e_df_qlf$label<-"No"
e_df_qlf$label[which(e_df_qlf$PValue<0.05 & abs(e_df_qlf$logFC)>1)]<-"Yes"
# Here we add two further columns, the gene symbol (common name) and entrez ID - both of which may be useful downstream
e_df_qlf$symbol <- mapIds(org.Hs.eg.db, keys=row.names(e_df_qlf), column="SYMBOL", keytype="ENSEMBL", multiVals="first") # MAPS GENE IDs
colnames(ds2_df)
colnames(e_df_qlf)
row.names(ds2_df)
row.names(e_df_qlf)
colnames(e_df_qlf)
e_df_qlf$genes
# Here we add two further columns, the gene symbol (common name) and entrez ID - both of which may be useful downstream
e_df_qlf$symbol <- mapIds(org.Hs.eg.db, keys=e_df_qlf$genes, column="SYMBOL", keytype="ENSEMBL", multiVals="first") # MAPS GENE IDs
library(ggplot2)
library(ggrepel)
#RNA volcano
#make sure to adjust xlim and ylim based off of the data. Run hist(e_df_qlf$logFC) and hist(e_df_qlf$log10.pvalue) to get an idea
# pick a set of genes to label:
e_df_qlf$label<-"No"
e_df_qlf$label[which(e_df_qlf$PValue<0.05 & abs(e_df_qlf$logFC)>1)]<-"Yes"
# Here we add two further columns, the gene symbol (common name) and entrez ID - both of which may be useful downstream
e_df_qlf$symbol <- mapIds(org.Hs.eg.db, keys=e_df_qlf$genes, column="SYMBOL", keytype="ENSEMBL", multiVals="first") # MAPS GENE IDs
e_df_qlf$entrez <- mapIds(org.Hs.eg.db, keys=e_df_qlf$genes, column="ENTREZID", keytype="ENSEMBL", multiVals="first")
#pdf("Volcano.pdf", width=8, height=4,useDingbats=FALSE)
pRNA <- ggplot(e_df_qlf, aes(logFC, log10.pvalue))+
geom_point(aes(colour = Differential_Gene),size=1)+
scale_colour_manual(values=c("blue", "black","red"))+
xlim(-6,6)+
ylim(0,5)+
xlab(expression(paste(log[2], 'FC(Ctrl/siRNA)')))+
ylab(expression(paste(-log[10], '(Q-value)'))) +
theme_bw() +
theme(panel.background = element_blank())+
theme(panel.border = element_rect(colour = "black", fill=NA, size=1))+
theme(text = element_text(size=10)) +
theme(plot.title = element_blank())+
theme(axis.text = element_text( color = "black", size = 10))+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line=element_line()) +
theme(legend.position="none")+
geom_vline(xintercept=-abs_log2fc,linetype="dotted")+
geom_vline(xintercept=abs_log2fc,linetype="dotted")+
geom_text_repel(
data = subset(e_df_qlf, Differential_Gene=="Yes"),
aes(label = e_df_qlf$symbol[which(Differential_Gene=="Yes")]),
size = 5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.5, "lines")
)
pRNA
library(ggplot2)
library(ggrepel)
#RNA volcano
#make sure to adjust xlim and ylim based off of the data. Run hist(e_df_qlf$logFC) and hist(e_df_qlf$log10.pvalue) to get an idea
# pick a set of genes to label:
e_df_qlf$label<-"No"
e_df_qlf$label[which(e_df_qlf$PValue<0.05 & abs(e_df_qlf$logFC)>1)]<-"Yes"
# Here we add two further columns, the gene symbol (common name) and entrez ID - both of which may be useful downstream
e_df_qlf$symbol <- mapIds(org.Hs.eg.db, keys=e_df_qlf$genes, column="SYMBOL", keytype="ENSEMBL", multiVals="first") # MAPS GENE IDs
e_df_qlf$entrez <- mapIds(org.Hs.eg.db, keys=e_df_qlf$genes, column="ENTREZID", keytype="ENSEMBL", multiVals="first")
#pdf("Volcano.pdf", width=8, height=4,useDingbats=FALSE)
pRNA <- ggplot(e_df_qlf, aes(logFC, log10.pvalue))+
geom_point(aes(colour = Differential_Gene),size=1)+
scale_colour_manual(values=c("blue", "black","red"))+
xlim(-6,6)+
ylim(0,5)+
xlab(expression(paste(log[2], 'FC(Ctrl/siRNA)')))+
ylab(expression(paste(-log[10], '(Q-value)'))) +
theme_bw() +
theme(panel.background = element_blank())+
theme(panel.border = element_rect(colour = "black", fill=NA, size=1))+
theme(text = element_text(size=10)) +
theme(plot.title = element_blank())+
theme(axis.text = element_text( color = "black", size = 10))+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line=element_line()) +
theme(legend.position="none")+
geom_vline(xintercept=-abs_log2fc,linetype="dotted")+
geom_vline(xintercept=abs_log2fc,linetype="dotted")+
geom_text_repel(
data = subset(e_df_qlf, Differential_Gene=="Yes"),
aes(label = e_df_qlf$genes[which(Differential_Gene=="Yes")]),
size = 5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.5, "lines")
)
pRNA
colnames(e_df_qlf)
library(ggplot2)
library(ggrepel)
#RNA volcano
#make sure to adjust xlim and ylim based off of the data. Run hist(e_df_qlf$logFC) and hist(e_df_qlf$log10.pvalue) to get an idea
# pick a set of genes to label:
e_df_qlf$label<-"No"
e_df_qlf$label[which(e_df_qlf$PValue<0.05 & abs(e_df_qlf$logFC)>1)]<-"Yes"
# Here we add two further columns, the gene symbol (common name) and entrez ID - both of which may be useful downstream
e_df_qlf$symbol <- mapIds(org.Hs.eg.db, keys=e_df_qlf$genes, column="SYMBOL", keytype="ENSEMBL", multiVals="first") # MAPS GENE IDs
e_df_qlf$entrez <- mapIds(org.Hs.eg.db, keys=e_df_qlf$genes, column="ENTREZID", keytype="ENSEMBL", multiVals="first")
#pdf("Volcano.pdf", width=8, height=4,useDingbats=FALSE)
pRNA <- ggplot(e_df_qlf, aes(logFC, log10.pvalue))+
geom_point(aes(colour = Differential_Gene),size=1)+
scale_colour_manual(values=c("blue", "black","red"))+
xlim(-6,6)+
ylim(0,5)+
xlab(expression(paste(log[2], 'FC(Ctrl/siRNA)')))+
ylab(expression(paste(-log[10], '(Q-value)'))) +
theme_bw() +
theme(panel.background = element_blank())+
theme(panel.border = element_rect(colour = "black", fill=NA, size=1))+
theme(text = element_text(size=10)) +
theme(plot.title = element_blank())+
theme(axis.text = element_text( color = "black", size = 10))+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line=element_line()) +
theme(legend.position="none")+
geom_vline(xintercept=-abs_log2fc,linetype="dotted")+
geom_vline(xintercept=abs_log2fc,linetype="dotted")+
geom_text_repel(
data = subset(e_df_qlf, Differential_Gene=="Yes"),
aes(label = e_df_qlf$symbol[which(Differential_Gene=="Yes")]),
size = 5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.5, "lines")
)
pRNA
library(ggplot2)
library(ggrepel)
#RNA volcano
#make sure to adjust xlim and ylim based off of the data. Run hist(ds2_df$log2FoldChange) and hist(ds2_df$log10.pvalue) to get an idea
# pick a set of genes to label:
ds2_df$label<-"No"
ds2_df$label[which(ds2_df$padj<adj_p_val & abs(ds2_df$log2FoldChange)>abs_log2fc)]<-"Yes"
# Here we add two further columns, the gene symbol (common name) and entrez ID - both of which may be useful downstream
ds2_df$symbol <- mapIds(org.Hs.eg.db, keys=row.names(ds2_df), column="SYMBOL", keytype="ENSEMBL", multiVals="first") # MAPS GENE IDs
ds2_df$entrez <- mapIds(org.Hs.eg.db, keys=row.names(ds2_df), column="ENTREZID", keytype="ENSEMBL", multiVals="first")
#pdf("Volcano.pdf", width=8, height=4,useDingbats=FALSE)
pRNA <- ggplot(ds2_df, aes(log2FoldChange, log10.pvalue))+
geom_point(aes(colour = Differential_Gene),size=1)+
scale_colour_manual(values=c("blue", "black","red"))+
xlim(-6,6)+
ylim(0,5)+
xlab(expression(paste(log[2], 'FC(Ctrl/siRNA)')))+
ylab(expression(paste(-log[10], '(Q-value)'))) +
theme_bw() +
theme(panel.background = element_blank())+
theme(panel.border = element_rect(colour = "black", fill=NA, size=1))+
theme(text = element_text(size=10)) +
theme(plot.title = element_blank())+
theme(axis.text = element_text( color = "black", size = 10))+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line=element_line()) +
theme(legend.position="none")+
geom_vline(xintercept=-abs_log2fc,linetype="dotted")+
geom_vline(xintercept=abs_log2fc,linetype="dotted")+
#  geom_text_repel(
#    data = subset(ds2_df, label=="Yes"),
#    aes(label = ds2_df$symbol[which(label=="Yes")]),
#    size = 5,
#    box.padding = unit(0.35, "lines"),
#    point.padding = unit(0.5, "lines")
#  )
pRNA
library(ggplot2)
library(ggrepel)
#RNA volcano
#make sure to adjust xlim and ylim based off of the data. Run hist(ds2_df$log2FoldChange) and hist(ds2_df$log10.pvalue) to get an idea
# pick a set of genes to label:
ds2_df$label<-"No"
ds2_df$label[which(ds2_df$padj<adj_p_val & abs(ds2_df$log2FoldChange)>abs_log2fc)]<-"Yes"
# Here we add two further columns, the gene symbol (common name) and entrez ID - both of which may be useful downstream
ds2_df$symbol <- mapIds(org.Hs.eg.db, keys=row.names(ds2_df), column="SYMBOL", keytype="ENSEMBL", multiVals="first") # MAPS GENE IDs
ds2_df$entrez <- mapIds(org.Hs.eg.db, keys=row.names(ds2_df), column="ENTREZID", keytype="ENSEMBL", multiVals="first")
#pdf("Volcano.pdf", width=8, height=4,useDingbats=FALSE)
pRNA <- ggplot(ds2_df, aes(log2FoldChange, log10.pvalue))+
geom_point(aes(colour = Differential_Gene),size=1)+
scale_colour_manual(values=c("blue", "black","red"))+
xlim(-6,6)+
ylim(0,5)+
xlab(expression(paste(log[2], 'FC(Ctrl/siRNA)')))+
ylab(expression(paste(-log[10], '(Q-value)'))) +
theme_bw() +
theme(panel.background = element_blank())+
theme(panel.border = element_rect(colour = "black", fill=NA, size=1))+
theme(text = element_text(size=10)) +
theme(plot.title = element_blank())+
theme(axis.text = element_text( color = "black", size = 10))+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line=element_line()) +
theme(legend.position="none")+
geom_vline(xintercept=-abs_log2fc,linetype="dotted")+
geom_vline(xintercept=abs_log2fc,linetype="dotted")+
geom_text_repel(
data = subset(ds2_df, label=="Yes"),
aes(label = ds2_df$symbol[which(label=="Yes")]),
size = 5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.5, "lines")
)
pRNA
#dev.off()
