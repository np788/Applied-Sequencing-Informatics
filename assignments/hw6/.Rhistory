# density plots
plotDensities(v, main="plotDensities(v)",legend=F)
list.sig <- names(lengths(sigGenes))
Name <- list.sig[3]
Data <- sigGenes[[Name]]
Name
# MA plot
results <- decideTests(fit2)
plotMD(fit2,coef=Name,status=results[,Name],values=c(1,-1),hl.col=c("red","green"), main=Name)
# volcano plot
Data$threshold <- as.factor(ifelse(Data$adj.P.Val < 0.05 & abs(Data$logFC) >= 1, ifelse(Data$logFC> 1 ,'Up','Down'),'NoSignifi'))
ggplot(data=Data, aes(x=logFC, y=-log10(adj.P.Val), colour=threshold)) +
geom_point(alpha=1, size=1.5) +
scale_color_manual(values=c("green", "grey","red")) +
xlim(c(-4.5, 4.5)) +
geom_vline(xintercept=c(-1, 1), lty=4,col="black",lwd=0.8) +
geom_hline(yintercept=-log10(0.05), lty=4,col="black",lwd=0.8) +
annotate("text", x=c(-1.2, 1.2), y=1.8, label=c("-1", "1")) +
annotate("text", x=-4, y=1.8, label="-log10(0.05)") +
labs(x="log2(fold change)", y="-log10 (p-value)", title=Name) +
theme(plot.title=element_text(hjust=0.5), legend.position="right", legend.title=element_blank())
GO.title <- paste(Name,"GO", collapse = " ")
KEGG.title <- paste(Name,"KEGG", collapse  = " ")
logFC <- Data$logFC
names(logFC) <- Data$entrezgene_id
logFC <- logFC[na.exclude(names(logFC))]
logFC <- sort(logFC, decreasing = T)
## GO over-representation test
geneName <- Data$entrezgene_id[abs(Data$logFC) > 1 & Data$adj.P.Val<0.05]
geneName <- na.exclude(geneName)
length(geneName)
ego <- enrichGO(gene          = geneName,
universe      = na.exclude(Data$entrezgene_id),
OrgDb         = org.Hs.eg.db,
ont           = "BP",
pAdjustMethod = "BH",
pvalueCutoff  = 0.01,
qvalueCutoff  = 0.05,
readable      = TRUE)
head(ego)
length(ego$ID)
## GO Gene Set Enrichment Analysis
geneList <- sign(Data$logFC)*(-log10(Data$adj.P.Val))
names(geneList) <- Data$entrezgene_id
geneList <- geneList[na.exclude(names(geneList))]
geneList <- sort(geneList, decreasing = T)
length(geneList)
ego3 <- gseGO(geneList     = geneList,
OrgDb        = org.Hs.eg.db,
ont          = "BP",
nPerm        = 50000,
minGSSize    = 100,
maxGSSize    = 500,
pvalueCutoff = 0.05,
verbose      = TRUE)
head(ego3)
length(ego3$ID)
dotplot(ego, showCategory=15) + ggtitle(GO.title)
dotplot(ego3, showCategory=15) + ggtitle(GO.title)
##  Gseaplot2 for GSEA result
gseaplot2(ego3, geneSetID=1:3, title = GO.title)
edox <- setReadable(ego3, 'org.Hs.eg.db', 'ENTREZID')
cnetplot(edox, showCategory = 3, foldChange=geneList, title=GO.title)
## KEGG over-representation test
geneName <- Data$entrezgene_id[abs(Data$logFC) > 1 & Data$adj.P.Val<0.05]
geneName <- na.exclude(geneName)
length(geneName)
kk <- enrichKEGG(
gene          = geneName,
universe      = na.exclude(Data$entrezgene_id),
organism      = 'hsa',
pAdjustMethod = "BH",
pvalueCutoff  = 0.01,
qvalueCutoff  = 0.05)
head(kk)
length(kk$ID)
## KEGG Gene Set Enrichment Analysis
geneList <- sign(Data$logFC)*(-log10(Data$adj.P.Val))
names(geneList) <- Data$entrezgene_id
geneList <- geneList[na.exclude(names(geneList))]
geneList <- sort(geneList, decreasing = T)
length(geneList)
kk2 <- gseKEGG(
geneList     = geneList,
organism     = 'hsa',
nPerm        = 50000,
minGSSize    = 100,
maxGSSize    = 500,
pvalueCutoff = 0.05,
verbose      = TRUE)
head(kk2)
length(kk2$ID)
dotplot(kk, showCategory=15) + ggtitle(KEGG.title)
dotplot(kk2, showCategory=15) + ggtitle(KEGG.title)
##  Gseaplot2 for GSEA result
gseaplot2(kk2, geneSetID=1:3, title = KEGG.title)
##  Gseaplot2 for GSEA result
gseaplot2(kk2, geneSetID=1:3, title = KEGG.title)
edox <- setReadable(kk2, 'org.Hs.eg.db', 'ENTREZID')
cnetplot(edox, showCategory = 3, foldChange=geneList, title=KEGG.title)
edox <- setReadable(kk2, 'org.Hs.eg.db', 'ENTREZID')
cnetplot(edox, showCategory = 3, foldChange=geneList, title=KEGG.title)
## pathview from pathview package
pathview(gene.data = logFC, pathway.id = kk2$ID[1],
species = "hsa", limit = list(gene=2, cpd=1))
## pathview from pathview package
pathview(gene.data = logFC, pathway.id = kk2$ID[1],
species = "hsa", limit = list(gene=2, cpd=1))
pathview(gene.data = logFC, pathway.id = kk2$ID[2],
species = "hsa", limit = list(gene=2, cpd=1))
pathview(gene.data = logFC, pathway.id = kk2$ID[2],
species = "hsa", limit = list(gene=2, cpd=1))
pathview(gene.data = logFC, pathway.id = kk2$ID[3],
species = "hsa", limit = list(gene=2, cpd=1))
pathview(gene.data = logFC, pathway.id = kk2$ID[3],
species = "hsa", limit = list(gene=2, cpd=1))
pathview(gene.data = logFC, pathway.id = kk$ID[2],
species = "hsa", limit = list(gene=2, cpd=1))
pathview(gene.data = logFC, pathway.id = kk$ID[2],
species = "hsa", limit = list(gene=2, cpd=1))
knitr::opts_chunk$set(echo = TRUE)
library(annotate)
library("dplyr")
library(limma)
library(edgeR)
library(WriteXLS)
library(pheatmap)
library(ggplot2)
library(EGSEA)
library(clusterProfiler)
library(enrichplot)
library(org.Hs.eg.db)
library("pathview")
library(goseq)
library(tidyverse)
library(statmod)
library(KEGGREST)
load(file="inbuilt_mapq20.RData")
counts <- as.data.frame(read_counts$counts)
colnames(counts) <- c("A1_PC9_before",
"A2_PC9_before",
"A3_PC9_before",
"B1_PC9_after",
"B2_PC9_after",
"B3_PC9_after",
"C1_PC9GR_before",
"C2_PC9GR_before",
"C3_PC9GR_before",
"D1_PC9GR_after",
"D2_PC9GR-after",
"D3-PC9GR_after")
dim(counts)
rownames(counts) <- as.character(row.names(counts))
entrezgene_id <- row.names(counts)
symbol <- getSYMBOL(entrezgene_id, data='org.Hs.eg')
annotation <- data.frame("entrezgene_id"=entrezgene_id, "symbol"=symbol)
annotation$entrezgene_id <- as.character(annotation$entrezgene_id)
annotation$symbol <- as.character(annotation$symbol)
dge <- DGEList(counts, genes = annotation)
# (requires > 1 CPM over at least 3 samples)
# isexpr <- rowSums(cpm(dge) > 1) >=3  # require a minimum counts per million
isexpr <- rowSums(dge$counts > 30) >=3  # or we can specify a minimum count
# Check what fraction of genes remain
sum(isexpr)/nrow(dge)
# Remove low expressed genes.
dge <- dge[isexpr,,keep.lib.sizes=FALSE] # keep.lib.sizes=FALSE to force recalculating library sizes from sums of column counts (note: we can also pass in library sizes explicitly)
dim(dge)
dge <- calcNormFactors(dge, method="TMM")
ss <- data.frame(Strain=c(rep("PC9", 6), rep("PC9GR", 6)),
Treatment=rep(rep(c("before", "after"), each=3),2),
ID=as.factor(c(rep((1:3),2), rep((4:6),2))),
name=colnames(counts))
ss$Strain <- relevel(ss$Strain, "PC9")
knitr::opts_chunk$set(echo = TRUE)
library(annotate)
library("dplyr")
library(limma)
library(edgeR)
library(WriteXLS)
library(pheatmap)
library(ggplot2)
library(EGSEA)
library(clusterProfiler)
library(enrichplot)
library(org.Hs.eg.db)
library("pathview")
library(goseq)
library(tidyverse)
library(statmod)
library(KEGGREST)
load(file="inbuilt_mapq20.RData")
counts <- as.data.frame(read_counts$counts)
colnames(counts) <- c("A1_PC9_before",
"A2_PC9_before",
"A3_PC9_before",
"B1_PC9_after",
"B2_PC9_after",
"B3_PC9_after",
"C1_PC9GR_before",
"C2_PC9GR_before",
"C3_PC9GR_before",
"D1_PC9GR_after",
"D2_PC9GR-after",
"D3-PC9GR_after")
dim(counts)
rownames(counts) <- as.character(row.names(counts))
entrezgene_id <- row.names(counts)
symbol <- getSYMBOL(entrezgene_id, data='org.Hs.eg')
annotation <- data.frame("entrezgene_id"=entrezgene_id, "symbol"=symbol)
annotation$entrezgene_id <- as.character(annotation$entrezgene_id)
annotation$symbol <- as.character(annotation$symbol)
dge <- DGEList(counts, genes = annotation)
# (requires > 1 CPM over at least 3 samples)
# isexpr <- rowSums(cpm(dge) > 1) >=3  # require a minimum counts per million
isexpr <- rowSums(dge$counts > 30) >=3  # or we can specify a minimum count
# Check what fraction of genes remain
sum(isexpr)/nrow(dge)
# Remove low expressed genes.
dge <- dge[isexpr,,keep.lib.sizes=FALSE] # keep.lib.sizes=FALSE to force recalculating library sizes from sums of column counts (note: we can also pass in library sizes explicitly)
dim(dge)
dge <- calcNormFactors(dge, method="TMM")
ss <- data.frame(Strain=c(rep("PC9", 6), rep("PC9GR", 6)),
Treatment=rep(rep(c("before", "after"), each=3),2),
ID=as.factor(c(rep((1:3),2), rep((4:6),2))),
name=colnames(counts))
#ss$Strain <- relevel(ss$Strain, "PC9")
#ss$Treatment <- relevel(ss$Treatment, "before")
ss
design <- model.matrix(~Strain*Treatment, data=ss)
v <- voom(dge, design, plot=TRUE)
cor <- duplicateCorrelation(v, design, block = ss$ID)
cor$consensus
v <- voom(dge, design, plot = TRUE, block = ss$ID, correlation = cor$consensus)
cor <- duplicateCorrelation(v, design, block = ss$ID)
cor$consensus
correlationMatrix <- cor(v$E)
type_condition <- ss[,1:2]
rownames(type_condition) <- colnames(v$E)
pheatmap(correlationMatrix, annotation_col = type_condition)
fit <- lmFit(v, design, block = ss$ID, correlation = cor$consensus)
cont.matrix <- cbind("PC9GR_vs_PC9_in_before"=c(0,1,0,0),
"after_vs_before_in_PC9"=c(0,0,1,0),
"after_vs_before_in_PC9GR"=c(0,0,1,1),
"interaction"=c(0,0,0,1))
cont.matrix
fit1 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit1)
Sum<-summary(decideTests(fit2,p.value=0.05,lfc=1))
Sum
PC9GR_vs_PC9_in_before = topTable(fit2, coef="PC9GR_vs_PC9_in_before", number=nrow(dge$counts), adjust.method="BH")
after_vs_before_in_PC9 = topTable(fit2, coef="after_vs_before_in_PC9", number=nrow(dge$counts), adjust.method="BH")
after_vs_before_in_PC9GR = topTable(fit2, coef="after_vs_before_in_PC9GR", number=nrow(dge$counts), adjust.method="BH")
interaction = topTable(fit2, coef="interaction", number=nrow(dge$counts), adjust.method="BH")
sigGenes = list()
sigGenes[["PC9GR_vs_PC9_in_before"]] = PC9GR_vs_PC9_in_before
sigGenes[["after_vs_before_in_PC9"]] = after_vs_before_in_PC9
sigGenes[["after_vs_before_in_PC9GR"]] = after_vs_before_in_PC9GR
sigGenes[["interaction"]] = interaction
# multidimensional scaling
plotMDS(v, main="plotMDS(v)",cex=1,col=c(rep("red",3),rep("green",3),rep("blue",3),rep("black",3)), xlim=c(-3,3))
# density plots
plotDensities(v, main="plotDensities(v)",legend=F)
list.sig <- names(lengths(sigGenes))
Name <- list.sig[4]
Data <- sigGenes[[Name]]
Name
# MA plot
results <- decideTests(fit2)
plotMD(fit2,coef=Name,status=results[,Name],values=c(1,-1),hl.col=c("red","green"), main=Name)
# volcano plot
Data$threshold <- as.factor(ifelse(Data$adj.P.Val < 0.05 & abs(Data$logFC) >= 1, ifelse(Data$logFC> 1 ,'Up','Down'),'NoSignifi'))
ggplot(data=Data, aes(x=logFC, y=-log10(adj.P.Val), colour=threshold)) +
geom_point(alpha=1, size=1.5) +
scale_color_manual(values=c("green", "grey","red")) +
xlim(c(-4.5, 4.5)) +
geom_vline(xintercept=c(-1, 1), lty=4,col="black",lwd=0.8) +
geom_hline(yintercept=-log10(0.05), lty=4,col="black",lwd=0.8) +
annotate("text", x=c(-1.2, 1.2), y=1.8, label=c("-1", "1")) +
annotate("text", x=-4, y=1.8, label="-log10(0.05)") +
labs(x="log2(fold change)", y="-log10 (p-value)", title=Name) +
theme(plot.title=element_text(hjust=0.5), legend.position="right", legend.title=element_blank())
GO.title <- paste(Name,"GO", collapse = " ")
KEGG.title <- paste(Name,"KEGG", collapse  = " ")
logFC <- Data$logFC
names(logFC) <- Data$entrezgene_id
logFC <- logFC[na.exclude(names(logFC))]
logFC <- sort(logFC, decreasing = T)
## GO over-representation test
geneName <- Data$entrezgene_id[abs(Data$logFC) > 1 & Data$adj.P.Val<0.05]
geneName <- na.exclude(geneName)
length(geneName)
ego <- enrichGO(gene          = geneName,
universe      = na.exclude(Data$entrezgene_id),
OrgDb         = org.Hs.eg.db,
ont           = "BP",
pAdjustMethod = "BH",
pvalueCutoff  = 0.01,
qvalueCutoff  = 0.05,
readable      = TRUE)
head(ego)
length(ego$ID)
## GO Gene Set Enrichment Analysis
geneList <- sign(Data$logFC)*(-log10(Data$adj.P.Val))
names(geneList) <- Data$entrezgene_id
geneList <- geneList[na.exclude(names(geneList))]
geneList <- sort(geneList, decreasing = T)
length(geneList)
ego3 <- gseGO(geneList     = geneList,
OrgDb        = org.Hs.eg.db,
ont          = "BP",
nPerm        = 50000,
minGSSize    = 100,
maxGSSize    = 500,
pvalueCutoff = 0.05,
verbose      = TRUE)
head(ego3)
length(ego3$ID)
dotplot(ego, showCategory=15) + ggtitle(GO.title)
dotplot(ego3, showCategory=15) + ggtitle(GO.title)
##  Gseaplot2 for GSEA result
gseaplot2(ego3, geneSetID=1:3, title = GO.title)
edox <- setReadable(ego3, 'org.Hs.eg.db', 'ENTREZID')
cnetplot(edox, showCategory = 3, foldChange=geneList, title=GO.title)
## KEGG over-representation test
geneName <- Data$entrezgene_id[abs(Data$logFC) > 1 & Data$adj.P.Val<0.05]
geneName <- na.exclude(geneName)
length(geneName)
kk <- enrichKEGG(
gene          = geneName,
universe      = na.exclude(Data$entrezgene_id),
organism      = 'hsa',
pAdjustMethod = "BH",
pvalueCutoff  = 0.01,
qvalueCutoff  = 0.05)
head(kk)
length(kk$ID)
## KEGG Gene Set Enrichment Analysis
geneList <- sign(Data$logFC)*(-log10(Data$adj.P.Val))
names(geneList) <- Data$entrezgene_id
geneList <- geneList[na.exclude(names(geneList))]
geneList <- sort(geneList, decreasing = T)
length(geneList)
kk2 <- gseKEGG(
geneList     = geneList,
organism     = 'hsa',
nPerm        = 50000,
minGSSize    = 100,
maxGSSize    = 500,
pvalueCutoff = 0.05,
verbose      = TRUE)
head(kk2)
length(kk2$ID)
dotplot(kk, showCategory=15) + ggtitle(KEGG.title)
dotplot(kk2, showCategory=15) + ggtitle(KEGG.title)
##  Gseaplot2 for GSEA result
gseaplot2(kk2, geneSetID=1:3, title = KEGG.title)
edox <- setReadable(kk2, 'org.Hs.eg.db', 'ENTREZID')
cnetplot(edox, showCategory = 3, foldChange=geneList, title=KEGG.title)
## pathview from pathview package
pathview(gene.data = logFC, pathway.id = kk2$ID[1],
species = "hsa", limit = list(gene=2, cpd=1))
pathview(gene.data = logFC, pathway.id = kk2$ID[2],
species = "hsa", limit = list(gene=2, cpd=1))
pathview(gene.data = logFC, pathway.id = kk2$ID[3],
species = "hsa", limit = list(gene=2, cpd=1))
gkm("input_data_example1.txt", 4, 1e-4)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(annotate)
library("dplyr")
library(limma)
library(edgeR)  # for TMM normalization
library(WriteXLS)
library(pheatmap)
library(ggplot2)
library(EGSEA)
library(clusterProfiler)
library(enrichplot)
library(org.Hs.eg.db)
library("pathview")
library(goseq)
library(tidyverse)
library(statmod)
library(KEGGREST)
knitr::opts_chunk$set(echo = TRUE)
library(annotate)
library("dplyr")
library(limma)
library(edgeR)  # for TMM normalization
library(WriteXLS)
library(pheatmap)
library(ggplot2)
library(EGSEA)
library(clusterProfiler)
library(enrichplot)
library(org.Hs.eg.db)
library("pathview")
library(goseq)
library(tidyverse)
library(statmod)
library(KEGGREST)
load(file="inbuilt_mapq20.RData")
file1 = load(file="inbuilt_mapq20.RData")
head(file1)
load(file="inbuilt_mapq20.RData")
install.packages('DESeq2')
DESeq2
library(DESeq2)
BiocManager::install("DESeq2")
BiocManager::install("Gviz")
BiocManager::install("GenomicFeatures", "SARTools", "Seurat")
pkgs = c("Gviz", "GenomicFeatures", "DeSeq2", "EdgeR", "SARTools", "Seurat")
BiocManager::install(pkgs)
pkgs = c("Gviz", "GenomicFeatures", "DESeq2", "edgeR")
install.packages('Seurat')
BiocManager::install(pkgs)
install.packages("devtools")
devtools::install_github("PF2-pasteur-fr/SARTools", build_opts="--no-resave-data")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
devtools::install_github("PF2-pasteur-fr/SARTools", build_opts="--no-resave-data")
library(SARtools)
library(devtools)
devtools::install_github("PF2-pasteur-fr/SARTools", build_opts="--no-resave-data")
devtools::install_github("PF2-pasteur-fr/SARTools", build_opts="--no-resave-data")
install.packages("remotes")
library("remotes")
remotes::install_github("PF2-pasteur-fr/SARTools")
BiocManager::install("DESeq2")
library(devtools)
devtools::install_github("PF2-pasteur-fr/SARTools", build_opts="--no-resave-data")
update_packages("DESeq2")
BiocManager::install("DESeq2")
knitr::opts_chunk$set(echo = TRUE)
### LOAD REQUIRED LIBRARIES
library("DESeq2")
library("pheatmap")
library("RColorBrewer")
library("vsn")
library("AnnotationDbi")
library("org.Hs.eg.db")
library("genefilter")
library("biomaRt")
library("IHW")
library("ggplot2")
#setwd("/Users/sanabadri/Desktop/SPRING2021/ASI/Practicum 6 - Hands-on gene expression analysis/")
CountTable <- read.csv("kal2.csv", header=TRUE, row.names=1)
samples <- read.table("sample.txt", header=TRUE)
#dds <- DESeqDataSetFromMatrix(countData = CountTable, colData=samples, design=~batch+condition)
dds <- DESeqDataSetFromMatrix(countData = CountTable, colData=samples, design=~condition)
dds = DESeq(dds)
counts(dds)->raw_counts
raw_counts<-as.data.frame(counts(dds))
#Not necessary to pre-filter low count genes before running the DESeq2 functions, pre-filtering is useful and can be done by removing rows in which there are very few reads, so we reduce the memory size of the dds data object, and increase the speed of the transformation and testing functions within DESeq2
#keep <- rowSums(counts(dds)) >= 10
#dds <- dds[keep,]
#Create a normalized matrix
norm_counts = counts(dds, normalized = TRUE)
### PRELIMINARY ANALYSES ###
# The first steps in your analysis should focus on better understanding the relationship of the datasets being studied. This can
# be simply achieved by generating a PCA plot showing the relationship of your samples.
# First we transform our raw count data using a variance stabilizing transformation (VST) that roughly mirrors how DeSeq2 models the data.
vsd1 <- varianceStabilizingTransformation(dds, blind=FALSE)
# Then we plot a PCA, grouping and coloring our datasets according to batch
plotPCA(vsd1, "condition")
# note that you can attach additional information based on the column headers in your sample table
plotPCA(vsd1, c("condition","batch"))
# we can also attempt to replicate the batch effect correction performed by DeSeq2 using the limma::removeBatchEffect function
vsd2 <- varianceStabilizingTransformation(dds, blind=FALSE)
assay(vsd2) <- limma::removeBatchEffect(assay(vsd2), vsd2$batch)
plotPCA(vsd2, "condition")
data <- plotPCA(vsd2, "condition",returnData=TRUE)
# We can also calculate and plot sample distances using either the batch corrected (vsd2) or uncorrected (vsd1) data.
# uncorrected
sampleDists <- dist( t( assay(vsd1) ) )
sampleDists
sampleDistMatrix <- as.matrix( sampleDists )
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Reds")) )(255)
pheatmap(sampleDistMatrix, clustering_distance_rows=sampleDists, clustering_distance_cols=sampleDists, col=colors)
# corrected
sampleDistsCorr <- dist( t( assay(vsd2) ) )
sampleDistsCorr
sampleDistCorrMatrix <- as.matrix( sampleDistsCorr )
colnames(sampleDistCorrMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistCorrMatrix, clustering_distance_rows=sampleDists, clustering_distance_cols=sampleDists, col=colors)
data <- plotPCA(vsd2, returnData=TRUE)
percentVar <- round(100 * attr(data, "percentVar"))
ggplot(data, aes(PC1, PC2, color=condition)) +
theme_bw() +
theme(panel.background = element_blank())+
theme(panel.border = element_rect(colour = "black", fill=NA, size=1))+
geom_point(size=5)+
scale_color_manual(values=c("#74c476","#ec7014","purple"))+
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
theme(plot.title = element_blank())+
theme(text = element_text(size=20))+
theme(legend.position="bottom") +
theme(axis.text = element_text( color = "black", size = 25))+
theme(legend.title=element_blank())
# Run DESEQ and generate a simple plot showing the distribution of regulated and unregulated genes
DatasetProcessed <- DESeq(vds2) # runs DESEQ
# Run DESEQ and generate a simple plot showing the distribution of regulated and unregulated genes
DatasetProcessed <- DESeq(vsd2) # runs DESEQ
install.packages("dsb")
library(dsb)
source('~/Downloads/asi/hw6/unique.R', echo=TRUE)
length(setdiff(dsu_f,ctrlu_f))
source('~/Downloads/asi/hw6/bedplot.R', echo=TRUE)
